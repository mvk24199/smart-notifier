/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.smartnotifier.api;

import com.smartnotifier.model.EventRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-25T19:30:04.879942-04:00[America/New_York]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "Events", description = "the Events API")
public interface EventsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_EVENTS_POST = "/events";
    /**
     * POST /events : Trigger a notification event
     * External Services can emit a new event into the system
     *
     * @param eventRequest  (required)
     * @param dryRun If true, validates the event but doesn&#39;t enqueue it. (optional)
     * @return Event accepted for processing (status code 202)
     *         or Invalid event (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "eventsPost",
        summary = "Trigger a notification event",
        description = "External Services can emit a new event into the system",
        tags = { "Events" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Event accepted for processing"),
            @ApiResponse(responseCode = "400", description = "Invalid event"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = EventsApi.PATH_EVENTS_POST,
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> eventsPost(
        @Parameter(name = "EventRequest", description = "", required = true) @Valid @RequestBody EventRequest eventRequest,
        @Parameter(name = "dryRun", description = "If true, validates the event but doesn't enqueue it.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dryRun", required = false) @Nullable Boolean dryRun
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
