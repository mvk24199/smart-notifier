/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.smartnotifier.api;

import com.smartnotifier.model.OptInRequest;
import com.smartnotifier.model.UserPreferences;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import jakarta.annotation.Generated;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-25T19:30:04.879942-04:00[America/New_York]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "Preferences", description = "the Preferences API")
public interface PreferencesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_OPT_IN_POST = "/opt-in";
    /**
     * POST /opt-in : Update user preferences
     *
     * @param optInRequest  (required)
     * @return Preferences updated (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "optInPost",
        summary = "Update user preferences",
        tags = { "Preferences" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Preferences updated"),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = PreferencesApi.PATH_OPT_IN_POST,
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> optInPost(
        @Parameter(name = "OptInRequest", description = "", required = true) @Valid @RequestBody OptInRequest optInRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_PREFERENCES_USER_ID_GET = "/preferences/{userId}";
    /**
     * GET /preferences/{userId} : Get user preferences
     * Get User Preferences
     *
     * @param userId  (required)
     * @return User preferences (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "preferencesUserIdGet",
        summary = "Get user preferences",
        description = "Get User Preferences",
        tags = { "Preferences" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User preferences", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserPreferences.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = PreferencesApi.PATH_PREFERENCES_USER_ID_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserPreferences> preferencesUserIdGet(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subscribedEvents\" : [ \"subscribedEvents\", \"subscribedEvents\" ], \"userId\" : \"userId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
